{"version":3,"sources":["data.js","components/question.js","App.js","serviceWorker.js","index.js"],"names":["data","id","question","answers","Question","nextStep","className","map","answer","index","key","onClick","questionaires","allAnswers","App","useState","current","setCurrent","closeQuestionaire","push","console","table","currentQuestion","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAkBeA,G,MAlBF,CACX,CAACC,GAAI,EACLC,SAAS,kLACTC,QAAQ,CAAC,gBACT,CAACF,GAAI,EACLC,SAAS,0BACTC,QAAQ,CAAC,SAAM,QACf,CAACF,GAAI,EACLC,SAAS,yBACTC,QAAQ,CAAC,MAAO,WAChB,CAACF,GAAI,EACLC,SAAS,0CACTC,QAAQ,CAAC,MAAM,WACf,CAACF,GAAI,EACLC,SAAS,qCACTC,QAAQ,CAAC,gCCKIC,EAlBE,SAAC,GAA4B,IAA1BF,EAAyB,EAAzBA,SAAUG,EAAe,EAAfA,SAC5B,OAAQ,yBAAKC,UAAU,qBACrB,yBAAKA,UAAU,WACb,wBAAIA,UAAU,YAAYJ,EAASA,UACnC,yBAAKI,UAAU,oBAEXJ,EAASC,QAAQI,KAAI,SAACC,EAAQC,GAC5B,OAAO,yBAAKC,IAAKD,EAAOH,UAAU,aAChC,4BAAQA,UAAU,SAASK,QAAS,kBAAMN,EAASG,IAASE,IAAKD,GAC9DD,WCNXI,EAAgB,GAClBC,EAAa,GA4BFC,MA1Bf,WAAgB,IAAD,EACiBC,mBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,KAQPC,EAAoB,WACxBN,EAAcO,KAAKN,GACnBA,EAAa,GACbI,EAAW,GACXG,QAAQC,MAAMT,IAEZU,EAAkBtB,EAAKgB,GAC3B,OACE,yBAAKV,UAAU,OACb,yBAAKA,UAAU,SAEf,kBAAC,EAAD,CAAUJ,SAAUoB,EAAiBjB,SAjBxB,SAACG,GAIhB,OAHAK,EAAWM,KAAKX,GAChBY,QAAQC,MAAMR,GACAG,IAAYhB,EAAKuB,OAAS,EACxBL,IAAsBD,EAAWD,EAAU,QCF3CQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1c37f412.chunk.js","sourcesContent":["const data = [\n  {id: 0,\n  question:\"Olá visitante, nós do Museu MM Gerdau contamos com sua colaboração respondendo este questionário, para que nossa equipe possa melhorar o espaço para você!\",\n  answers:[\"Vamos Lá\"]},\n  {id: 1,\n  question:\"Você gosta do museu?\",\n  answers:[\"não\",\"sim\"]},\n  {id: 2,\n  question:\"Você voltaria aqui?\",\n  answers:[\"sim\", \"não\"]},\n  {id: 3,\n  question:\"Voce indicaria o museu para seu amigos?\",\n  answers:[\"sim\",\"não\"]},\n  {id: 4,\n  question:\"Obrigado por colaborar com o Museu\",\n  answers:[\"Reiniciar Questionário\"]}\n  \n]\nexport default data","import React from \"react\"\n\nconst Question = ({ question, nextStep }) => {\n  return (<div className=\"message-container\">\n    <div className=\"message\">\n      <h1 className=\"question\">{question.question}</h1>\n      <div className=\"button-container\">\n        {\n          question.answers.map((answer, index) => {\n            return <div key={index} className=\"divButton\">\n              <button className=\"button\" onClick={() => nextStep(answer)} key={index}>\n                {answer}\n              </button>\n            </div>\n          })\n        }\n      </div>\n    </div>\n  </div>)\n}\nexport default Question","import React, { useState } from 'react';\nimport './App.css';\nimport data from './data'\nimport Question from './components/question';\n\nconst questionaires = []\nlet allAnswers = []\n\nfunction App() {\n  const [current, setCurrent] = useState(0)\n  const nextStep = (answer) => {\n    allAnswers.push(answer)\n    console.table(allAnswers)\n    let isLast = (current === data.length - 1)\n    return isLast ? closeQuestionaire() : setCurrent(current + 1)\n  }\n  const closeQuestionaire = () => {\n    questionaires.push(allAnswers)\n    allAnswers = []\n    setCurrent(0)\n    console.table(questionaires)\n  }\n  let currentQuestion = data[current]\n  return (\n    <div className=\"App\">\n      <div className=\"logo\">\n      </div>\n      <Question question={currentQuestion} nextStep={nextStep} />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}